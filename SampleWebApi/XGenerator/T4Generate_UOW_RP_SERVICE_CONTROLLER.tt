<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".txt" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="T4Helper.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#  //Set these options
    string StartupProject = "Webapi";
    string EntityNamespace = "Domain.Entities";
    string DbContextNamespace = "Infrastructure.Persistence.Context";
    string efContext = "ApplicationDbContext"; //If Context is not in the same namespace rename this to the name of the context

    IServiceProvider serviceProvider = (IServiceProvider)this.Host;
    DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE; 
    var project1 = FindProjectByName(dte, "Domain");
    var classes = FindClasses(project1, EntityNamespace, "");
    var classNames = classes
                    .Select(currentClass => currentClass.Name)
                    .ToList();
    var project2 = FindProjectByName(dte, "Infrastructure");
    var dbcclass = FindClasses(project2, DbContextNamespace, "");
    var classWithDbContext = dbcclass.FirstOrDefault(currentClass => currentClass.Bases.OfType<CodeElement>().Any(currentBase => currentBase.Name == "DbContext"));
    if(classWithDbContext != null)
    {
        efContext = classWithDbContext.Name;
    }
#>
/////////////////////////////////////
// generated IGenericRepository.cs //
/////////////////////////////////////
using System.Linq.Expressions;

namespace Domain.Interfaces
{
    public interface IGenericRepository<T> where T : class
    {
        ValueTask<T?> GetById(int id);
        ValueTask<T?> GetById(string id);
        Task<IEnumerable<T>> GetAll();
        Task<IEnumerable<T>> Find(Expression<Func<T, bool>> expression);
        Task Add(T entity);
        void Remove(T entitiy);
        void Update(T entitiy);

    }
}
<# CreateFile("Domain", "Interfaces","IGenericRepository.cs"); #>
////////////////////////////////////
// generated GenericRepository.cs //
////////////////////////////////////
using Domain.Interfaces;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace Infrastructure.Persistence.Repositories
{
    public class GenericRepository<T> : IGenericRepository<T> where T : class
    {
        //replace DbContex with ApplicationDbContext
        public ApplicationDbContext _context;

        public GenericRepository(ApplicationDbContext context)
        {
            _context = context;
        }

        public virtual async ValueTask<T?> GetById(int id)
        {
            return await _context.Set<T>().FindAsync(id);
        }
        public virtual async ValueTask<T?> GetById(string id)
        {
            return await _context.Set<T>().FindAsync(id);
        }
        public virtual async Task<IEnumerable<T>> GetAll()
        {
            return await _context.Set<T>().ToListAsync();
        }
        public virtual async Task<IEnumerable<T>> Find(Expression<Func<T, bool>> expression)
        {
            return await _context.Set<T>().Where(expression).ToListAsync();
        }
        public virtual async Task Add(T entity)
        {
            await _context.Set<T>().AddAsync(entity);
        }
        public virtual void Remove(T entity)
        {
            _context.Set<T>().Remove(entity);

        }
        public virtual void Update(T entity)
        {
            _context.Set<T>().Update(entity);
        }
    }
}
<# CreateFile("Infrastructure", "Persistence/Repositories","GenericRepository.cs"); #>
//////////////////////////////
// generated IUnitOfWork.cs //
//////////////////////////////
namespace Domain.Interfaces
{
    public interface IUnitOfWork
    {
        Task BeginTransactionAsync(CancellationToken cancellationToken = default);
        Task CommitTransactionAsync(CancellationToken cancellationToken = default);
        Task<int> CompleteAsync(CancellationToken cancellationToken = default);
    }
}
<# CreateFile("Domain", "Interfaces","IUnitOfWork.cs"); #>
/////////////////////////////
// generated UnitOfWork.cs //
/////////////////////////////
using Domain.Interfaces;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore.Storage;


namespace Infrastructure.Persistence.Repositories
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly ApplicationDbContext _context;

        private IDbContextTransaction _transaction;

        public UnitOfWork(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task BeginTransactionAsync(CancellationToken cancellationToken = default)
        {
            _transaction = await _context.Database.BeginTransactionAsync(cancellationToken);
        }

        public async Task CommitTransactionAsync(CancellationToken cancellationToken = default)
        {
            await _transaction.CommitAsync(cancellationToken);
        }

        public async Task<int> CompleteAsync(CancellationToken cancellationToken = default)
        {
            return await _context.SaveChangesAsync(cancellationToken);
        }

        public void Dispose()
        {
            _transaction?.Dispose();

            _context.Dispose();
        }
    }
}
<# CreateFile("Infrastructure", "Persistence/Repositories","UnitOfWork.cs"); #>
//////////////////////////////////////
// generated BadRequestException.cs //
//////////////////////////////////////
namespace Domain.Exceptions
{
    public abstract class BadRequestException : Exception
    {
        protected BadRequestException(string message) : base(message)
        {
        }
    }
}
<# CreateFile("Domain", "Exceptions","BadRequestException.cs"); #>
////////////////////////////////////
// generated NotFoundException.cs //
////////////////////////////////////
namespace Domain.Exceptions
{
    public abstract class NotFoundException : Exception
    {
        protected NotFoundException(string message) : base(message)
        {
        }
    }
}
<# CreateFile("Domain", "Exceptions","NotFoundException.cs"); #>
//////////////////////////////////////////
// generated EntityKeyFoundException.cs //
//////////////////////////////////////////
namespace Domain.Exceptions
{
    public sealed class EntityKeyFoundException : BadRequestException
    {
        public EntityKeyFoundException(string entity, string id)
            : base(String.Format("Entity {0} with the identifier {1} exist.", entity, id))
        {
        }
    }
}
<# CreateFile("Domain", "Exceptions","EntityKeyFoundException.cs"); #>
/////////////////////////////////////////////
// generated EntityKeyNotFoundException.cs //
/////////////////////////////////////////////
namespace Domain.Exceptions
{
    public sealed class EntityKeyNotFoundException : NotFoundException
    {
        public EntityKeyNotFoundException(string entity, string id)
            : base(String.Format("Entity {0} with the identifier {1} was not found.", entity, id))
        {
        }
    }
}
<# CreateFile("Domain", "Exceptions","EntityKeyNotFoundException.cs"); #>
////////////////////////////////////
// generated AssemblyReference.cs //
////////////////////////////////////
namespace Infrastructure.Presentation
{
    public static class AssemblyReference
    {
    }
}
<# CreateFile("Infrastructure", "Presentation","AssemblyReference.cs"); #>
//////////////////////////////////////////
// generated AddApplicationExtension.cs //
//////////////////////////////////////////
using Application.Interfaces;
using Application.Services;

namespace <#= StartupProject #>.Extensions
{
    public static class AddApplicationExtension
    {
        public static IServiceCollection AddApplication(this IServiceCollection services)
        {
            services.AddScoped<IServiceManager, ServiceManager>();
            return services;
        }
    }
}
<# CreateFile(StartupProject, "Extensions","AddApplicationExtension.cs"); #>
//////////////////////////////////////////
// generated AddPersistenceExtension.cs //
//////////////////////////////////////////
using Domain.Interfaces;
using Infrastructure.Persistence.Context;
using Infrastructure.Persistence.Repositories;
using Microsoft.EntityFrameworkCore;

namespace <#= StartupProject #>.Extensions
{
    public static class AddPersistenceExtension
    {
        public static IServiceCollection AddInfrastructure(this IServiceCollection services)
        {
            services.AddDbContext<ApplicationDbContext>(options => options.UseSqlite("Name=SqliteDb"));
            //services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer("Name=SqlServerDb"));
            services.AddScoped<IRepositoryManager, RepositoryManager>();
            return services;
        }
    }
}
<# CreateFile(StartupProject, "Extensions","AddPersistenceExtension.cs"); #>
//////////////////////////////////////////////
// generated ExceptionHandlingMiddleware.cs //
//////////////////////////////////////////////
using Domain.Exceptions;
using System.Text.Json;

namespace <#= StartupProject #>.Middlewares
{
    internal sealed class ExceptionHandlingMiddleware : IMiddleware
    {
        private readonly ILogger<ExceptionHandlingMiddleware> _logger;

        public ExceptionHandlingMiddleware(ILogger<ExceptionHandlingMiddleware> logger) => _logger = logger;

        public async Task InvokeAsync(HttpContext context, RequestDelegate next)
        {
            try
            {
                await next(context);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);

                await HandleExceptionAsync(context, e);
            }
        }

        private static async Task HandleExceptionAsync(HttpContext httpContext, Exception exception)
        {
            httpContext.Response.ContentType = "application/json";

            httpContext.Response.StatusCode = exception switch
            {
                BadRequestException => StatusCodes.Status400BadRequest,
                NotFoundException => StatusCodes.Status404NotFound,
                _ => StatusCodes.Status500InternalServerError
            };

            var response = new
            {
                error = exception.Message
            };

            await httpContext.Response.WriteAsync(JsonSerializer.Serialize(response));
        }
    }
}
<# CreateFile(StartupProject, "Middlewares","ExceptionHandlingMiddleware.cs"); #>
//////////////////////////
// generated Program.cs //
//////////////////////////
using Serilog;

namespace <#= StartupProject #>
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                //this is needed for Serilog.AspNetCore, Serilog.Settings.Configuration, Serilog.Sinks.File, Serilog.Sinks.Console, Serilog.Expressions
                //installed in application project,
                //this project has reference to application project
                .UseSerilog()

                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseIISIntegration();
                    webBuilder.UseStartup<Startup>();
                });
    }
}
<# CreateFile(StartupProject, "","Program.cs"); #>
//////////////////////////
// generated Startup.cs //
//////////////////////////
using Microsoft.OpenApi.Models;
using Serilog;
using <#= StartupProject #>.Extensions;
using <#= StartupProject #>.Middlewares;

namespace <#= StartupProject #>
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
            //this is needed for Serilog.AspNetCore, Serilog.Settings.Configuration, Serilog.Sinks.File, Serilog.Sinks.Console,Serilog.Expressions
            //installed in application project,
            //this project has reference to application project
            Log.Logger = new LoggerConfiguration()
                .ReadFrom.Configuration(configuration)
                .CreateLogger();
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // this has AddApplicationPart so that the controllers are referenced from Infrastructure.Presentation instead of <#= StartupProject #>
            services.AddControllers().AddApplicationPart(typeof(Infrastructure.Presentation.AssemblyReference).Assembly);

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "<#= StartupProject #>", Version = "v1" });
            });

            // added these for this project
            services.AddInfrastructure();
            services.AddApplication();
            //this is need for exception handling
            services.AddTransient<ExceptionHandlingMiddleware>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment()|| env.IsProduction())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => 
                {
                    string swaggerJsonBasePath = string.IsNullOrWhiteSpace(c.RoutePrefix) ? "." : "..";
                    c.SwaggerEndpoint($"{swaggerJsonBasePath}/swagger/v1/swagger.json", "<#= StartupProject #> v1");
                });
            }

            //added to handle exceptions
            app.UseMiddleware<ExceptionHandlingMiddleware>();

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
<# CreateFile(StartupProject, "","Startup.cs"); #>
////////////////////////////////
// generated appsettings.json //
////////////////////////////////
{
  //define connection here
  "ConnectionStrings": {
    "SqliteDB": "DataSource=app.db;Cache=Shared",
    "SqlServerDB": "Server=DESKTOP-GBANT4V; Database=BookStoresDB; Trusted_Connection=True;"
  },
  //required to control serilog
  "Serilog": {
    "MinimumLevel": "Information",
    "Override": {
      "Microsoft.AspNetCore": "Warning"
    },
    "WriteTo": [
      {
        "Name": "Console"
      },
      {
        "Name": "File",
        "Args": {
          "path": "Logs\\AppLogs.log",
          "outputTemplate": "{Timestamp:HH:mm:ss.fff zzz} [{Level}] [{SourceContext}] {Message}{NewLine}{Exception}"
        }
      }
    ],
    "Filter": [
      {
        "Name": "ByExcluding",
        "Args": {
          "expression": "StartsWith(SourceContext, 'Microsoft.')"
        }
      }
    ]
  },
  "AllowedHosts": "*"
}
<# CreateFile(StartupProject, "","appsettings.json"); #><#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
    var repositoryName =  properClassName + "Repository";
    (var key1,var key1Type) = GetKeyPropertyOfAClass(dte,project1,EntityNamespace+"."+properClassName);
#>
/////////////////////////////////////////
// generated I<#= repositoryName #>.cs //
/////////////////////////////////////////
using Domain.Entities;

namespace Domain.Interfaces
{
    public interface I<#= repositoryName #> : IGenericRepository<<#= properClassName #>>
    {
        //Task<IEnumerable<<#= properClassName #>>> Get<#= properClassName #>ByName(string name);
    }
}
<# CreateFile("Domain", "Interfaces", "I"+repositoryName+".cs"); #>
<#
}
#>
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
    var repositoryName =  properClassName + "Repository";
    (var key1,var key1Type) = GetKeyPropertyOfAClass(dte,project1,EntityNamespace+"."+properClassName);
#>
////////////////////////////////////////
// generated <#= repositoryName #>.cs //
////////////////////////////////////////
using Domain.Entities;
using Domain.Interfaces;
using Infrastructure.Persistence.Context;

namespace Infrastructure.Persistence.Repositories
{
    public class <#= properClassName #>Repository : GenericRepository<<#= properClassName #>>, I<#= properClassName #>Repository
    {
        public <#= properClassName #>Repository(ApplicationDbContext context) : base(context)
        {
            _context = context;
        }
        //public async Task<IEnumerable<<#= properClassName #>>> Get<#= properClassName #>ByName(string name)
        //{
        //    return await _context.Set<<#= properClassName #>>().Where(x => x.Name == name).ToListAsync();
        //}
    }
}
<# CreateFile("Infrastructure", "Persistence/Repositories", repositoryName+".cs"); #>
<#
}
#>
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
    var serviceName =  properClassName + "Service";
    (var key1,var key1Type) = GetKeyPropertyOfAClass(dte,project1,EntityNamespace+"."+properClassName);
#>
//////////////////////////////////////
// generated I<#= serviceName #>.cs //
//////////////////////////////////////
using Domain.Entities;
using System.Linq.Expressions;

namespace Application.Interfaces
{
    public interface I<#= properClassName #>Service
    {
        Task<string> Add<#= properClassName #>(<#= properClassName #> entity, CancellationToken cancellationToken = default);
        Task<(IEnumerable<<#= properClassName #>> entities, string Message)> Find<#= properClassName #>(Expression<Func<<#= properClassName #>, bool>> expression, CancellationToken cancellationToken = default);
        Task<(IEnumerable<<#= properClassName #>> entities, string Message)> GetAll<#= properClassName #>(CancellationToken cancellationToken = default);
        Task<(<#= properClassName #>? entity, string Message)> Get<#= properClassName #>ById(<#= key1Type #> <#= key1 #>, CancellationToken cancellationToken = default);
        Task<string> Remove<#= properClassName #>(<#= key1Type #> <#= key1 #>, CancellationToken cancellationToken = default);
        Task<string> Update<#= properClassName #>(<#= properClassName #> entity, CancellationToken cancellationToken = default);
    }
}
<# CreateFile("Application", "Interfaces", "I"+serviceName+".cs"); #>
<#
}
#>
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
    var serviceName =  properClassName + "Service";
    var repositoryName =  properClassName + "Repository";
    (var key1,var key1Type) = GetKeyPropertyOfAClass(dte,project1,EntityNamespace+"."+properClassName);
#>
/////////////////////////////////////
// generated <#= serviceName #>.cs //
/////////////////////////////////////
using Application.Interfaces;
using Domain.Entities;
using Domain.Exceptions;
using Domain.Interfaces;
using System.Linq.Expressions;

namespace Application.Services
{
    public class <#= properClassName #>Service : I<#= properClassName #>Service
    {
        private readonly IRepositoryManager _repositoryManager;

        public <#= properClassName #>Service(IRepositoryManager repositoryManager)
        {
            _repositoryManager = repositoryManager;
        }
        public async Task<(IEnumerable<<#= properClassName #>> entities, string Message)> Find<#= properClassName #>(Expression<Func<<#= properClassName #>, bool>> expression, CancellationToken cancellationToken = default)
        {
            var items = await _repositoryManager.<#= properClassName #>Repository.Find(expression);
            return (items, "<#= properClassName #> records retrieved");
        }

        public async Task<(IEnumerable<<#= properClassName #>> entities, string Message)> GetAll<#= properClassName #>(CancellationToken cancellationToken = default)
        {
            var items = await _repositoryManager.<#= properClassName #>Repository.GetAll();
            return (items, "<#= properClassName #> records retrieved");
        }

        public async Task<(<#= properClassName #>? entity, string Message)> Get<#= properClassName #>ById(<#= key1Type #> <#= key1 #>, CancellationToken cancellationToken = default)
        {
            var item = await _repositoryManager.<#= properClassName #>Repository.GetById(<#= key1 #>);
            if (item == null)
            {
                throw new EntityKeyNotFoundException("<#= properClassName #>", <#= key1 #>.ToString());
            }
            return (item, "<#= properClassName #> record retrieved");
        }

        public async Task<string> Add<#= properClassName #>(<#= properClassName #> entity, CancellationToken cancellationToken = default)
        {
            if (entity != null)
            {
                var item = await _repositoryManager.<#= properClassName #>Repository.GetById(entity.<#= key1 #>);
                if (item != null)
                {
                    throw new EntityKeyFoundException("<#= properClassName #>", entity.<#= key1 #>.ToString());
                }
                else
                {
                    await _repositoryManager.<#= properClassName #>Repository.Add(entity);
                    await _repositoryManager.UnitOfWork.CompleteAsync(cancellationToken);
                    return "<#= properClassName #> record added";
                }
            }
            throw new Exception("Add Error");
        }

        public async Task<string> Remove<#= properClassName #>(<#= key1Type #> <#= key1 #>, CancellationToken cancellationToken = default)
        {
            var item = await _repositoryManager.<#= properClassName #>Repository.GetById(<#= key1 #>);
            if (item == null)
            {
                throw new EntityKeyNotFoundException("<#= properClassName #>", <#= key1 #>.ToString());
            }
            else
            {
                _repositoryManager.<#= properClassName #>Repository.Remove(item);
                await _repositoryManager.UnitOfWork.CompleteAsync(cancellationToken);
                return "<#= properClassName #> record deleted";
            }
        }

        public async Task<string> Update<#= properClassName #>(<#= properClassName #> entity, CancellationToken cancellationToken = default)
        {
            if (entity != null)
            {
                var item = await _repositoryManager.<#= properClassName #>Repository.GetById(entity.<#= key1 #>);
                if (item == null)
                {
                    throw new EntityKeyNotFoundException("<#= properClassName #>", entity.<#= key1 #>.ToString());
                }
                else
                {
                    //only place that need change if structure changes
                    //item.Name = entity.Name;
                    //item.Description = entity.Description;

                    _repositoryManager.<#= properClassName #>Repository.Update(item);
                    await _repositoryManager.UnitOfWork.CompleteAsync(cancellationToken);
                    return "<#= properClassName #> record updated";
                }
            }
            throw new Exception("Update Error");
        }
    }
}
<# CreateFile("Application", "Services", serviceName+".cs"); #>
<#
}
#>
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
    var controller =  properClassName + "Controller";
    (var key1,var key1Type) = GetKeyPropertyOfAClass(dte,project1,EntityNamespace+"."+properClassName);
#>
////////////////////////////////////
// generated <#= controller #>.cs //
////////////////////////////////////
using Application.Interfaces;
using Domain.Entities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Infrastructure.Presentation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class <#= properClassName #>Controller : ControllerBase
    {
        private readonly ILogger<<#= properClassName #>Controller> logger;
        private readonly IServiceManager _serviceManager;

        public <#= properClassName #>Controller(IServiceManager serviceManager, ILogger<<#= properClassName #>Controller> logger)
        {
            _serviceManager = serviceManager;
            this.logger = logger;
        }
        // GET: api/<<#= properClassName #>Controller>
        [HttpGet]
        public async Task<IActionResult> Get()
        {
            var result = await _serviceManager.<#= properClassName #>Service.GetAll<#= properClassName #>();
            return Ok(result.entities);
        }

        // GET api/<<#= properClassName #>Controller>/5
        [HttpGet("{id}")]
        public async Task<IActionResult> Get(<#= key1Type #> id)
        {
            var result = await _serviceManager.<#= properClassName #>Service.Get<#= properClassName #>ById(id);
            return Ok(result.entity);
        }

        // POST api/<<#= properClassName #>Controller>
        [HttpPost]
        public async Task<IActionResult> Post([FromBody] <#= properClassName #> entity)
        {
            var result = await _serviceManager.<#= properClassName #>Service.Add<#= properClassName #>(entity);
            return Ok(result);
        }

        // PUT api/<<#= properClassName #>Controller>/5
        [HttpPut()]
        public async Task<IActionResult> Put([FromBody] <#= properClassName #> entity)
        {
            var result = await _serviceManager.<#= properClassName #>Service.Update<#= properClassName #>(entity);
            return Ok(result);
        }

        // DELETE api/<<#= properClassName #>Controller>/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(<#= key1Type #> id)
        {
            var result = await _serviceManager.<#= properClassName #>Service.Remove<#= properClassName #>(id);
            return Ok(result);
        }
    }
}
<# CreateFile("Infrastructure", "Presentation/Controllers", controller+".cs"); #>
<#
}
#>
//////////////////////////////////
// generated IServiceManager.cs //
//////////////////////////////////
namespace Application.Interfaces
{
    public interface IServiceManager
    {
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
#>
        I<#= properClassName #>Service <#= properClassName #>Service { get; }
<#
}
#>
    }
}
<# OverwriteFile("Application", "Interfaces","IServiceManager.cs"); #>
/////////////////////////////////
// generated ServiceManager.cs //
/////////////////////////////////
using Application.Interfaces;
using Domain.Interfaces;

namespace Application.Services
{
    public class ServiceManager : IServiceManager
    {
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
#>
        private readonly Lazy<I<#= properClassName #>Service> _lazy<#= properClassName #>Service;
<#
}
#>
        public ServiceManager(IRepositoryManager repositoryManager)
        {
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
#>
            _lazy<#= properClassName #>Service = new Lazy<I<#= properClassName #>Service>(() => new <#= properClassName #>Service(repositoryManager));
<#
}
#>
        }
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
#>
        public I<#= properClassName #>Service <#= properClassName #>Service => _lazy<#= properClassName #>Service.Value;
<#
}
#>
    }
}
<# OverwriteFile("Application", "Services","ServiceManager.cs"); #>
/////////////////////////////////////
// generated IRepositoryManager.cs //
/////////////////////////////////////
namespace Domain.Interfaces
{
    public interface IRepositoryManager
    {
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
#>
        I<#= properClassName #>Repository <#= properClassName #>Repository { get; }
<#
}
#>
        IUnitOfWork UnitOfWork { get; }
    }
}
<# OverwriteFile("Domain", "Interfaces","IRepositoryManager.cs"); #>
////////////////////////////////////
// generated RepositoryManager.cs //
////////////////////////////////////
using Domain.Interfaces;
using Infrastructure.Persistence.Context;

namespace Infrastructure.Persistence.Repositories
{
    public class RepositoryManager : IRepositoryManager
    {
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
#>
        private readonly Lazy<I<#= properClassName #>Repository> _lazy<#= properClassName #>Repository;
<#
}
#>
        private readonly Lazy<IUnitOfWork> _lazyUnitOfWork;

        public RepositoryManager(ApplicationDbContext context)
        {
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
#>
            _lazy<#= properClassName #>Repository = new Lazy<I<#= properClassName #>Repository>(() => new <#= properClassName #>Repository(context));
<#
}
#>
            _lazyUnitOfWork = new Lazy<IUnitOfWork>(() => new UnitOfWork(context));
        }
<#foreach(string className in classNames)
{
    var properClassName = GetProperClassName(className);
#>
        public I<#= properClassName #>Repository <#= properClassName #>Repository => _lazy<#= properClassName #>Repository.Value;
<#
}
#>
        public IUnitOfWork UnitOfWork => _lazyUnitOfWork.Value;
    }
}
<# OverwriteFile("Infrastructure", "Persistence/Repositories","RepositoryManager.cs"); #>