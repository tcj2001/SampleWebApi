﻿<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="EnvDTE" #>
<#@ Import Namespace="EnvDTE" #>
<#@ Import Namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#+
    //Generating Seperate Files
    public void ProcessContent(bool flag, string project, string folder, string outputFileName, string content)
    {
        string projectDirectory = GetProjectDirectory(project);
        string outputFilePath = Path.Combine(projectDirectory+"\\"+folder, outputFileName);
        string outputDirectoryPath = Path.GetDirectoryName(outputFilePath);        

        if(!Directory.Exists(outputDirectoryPath))
        {
            Directory.CreateDirectory(outputDirectoryPath);
        }

        if(flag==false){
            if(!File.Exists(outputFilePath)){
                File.WriteAllText(outputFilePath, content);
                IServiceProvider hostServiceProvider = (IServiceProvider)Host;
                EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
                var project1 = FindProjectByName(dte, project);
                ProjectItem containingProjectItem = dte.Solution.FindProjectItem(outputFileName);
                if (containingProjectItem != null){
                    ProjectItem item = project1.ProjectItems.Item(folder);
                    if(item !=null)
                        item.ProjectItems.AddFromFileCopy(outputFilePath);
                }
            }
        }
        else
        {
            File.WriteAllText(outputFilePath, content);
            IServiceProvider hostServiceProvider = (IServiceProvider)Host;
            EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            var project1 = FindProjectByName(dte, project);
            ProjectItem containingProjectItem = dte.Solution.FindProjectItem(outputFileName);
            if (containingProjectItem != null){
                ProjectItem item = project1.ProjectItems.Item(folder);
                if(item !=null)
                    item.ProjectItems.AddFromFileCopy(outputFilePath);
            }
        }
    }

    public void CreateFile(string project, string folder, string fileName)
    {
        ProcessContent(false, project, folder, fileName, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
    
    public void OverwriteFile(string project, string folder, string fileName)
    {
        ProcessContent(true, project, folder, fileName, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
    
    public string GetSolutionDirectory()
    {
        var serviceProvider = this.Host as IServiceProvider;
        var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
        return System.IO.Path.GetDirectoryName(dte.Solution.FullName);
    }

    public string GetProjectDirectory(string project)
    {
        var serviceProvider = this.Host as IServiceProvider;
        var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
        var project1 = FindProjectByName(dte, project);
        return System.IO.Path.GetDirectoryName(project1.FullName);
    }

    //Get Projects
    public static Project FindProjectByName(DTE dte, string name)
    {
        return dte.Solution.Projects.OfType<Project>().Single(p => p.Name == name);
    }

    //Get properties of a class
    public static IEnumerable<CodeProperty> FindProperties(CodeType codeType)
    {
        return codeType.Members.OfType<CodeProperty>().OrderBy(p => p.Name);
    }

    //Get named properties of a class
    public static CodeProperty FindProperty(CodeType codeType, string name)
    {
        return codeType.Members.OfType<CodeProperty>().Single(p => p.Name == name);
    }

    //Get named properties of a class with given attribute 
    public static CodeProperty FindPropertyByAttribute(CodeType codeType, string name)
    {
        foreach (var property in FindProperties(codeType))
        {
            var attr = property.Attributes.OfType<CodeAttribute>().FirstOrDefault(x => x.Name == name);
            if(attr != null) return property;
        }
        return null;
    }

    public static (string,string) GetKeyPropertyOfAClass(DTE dte, Project project, string className)
    {
        var class1 = FindClass(dte, project, className);
        var prop1 = FindPropertyByAttribute(class1,"Key");
        var key1="id";
        var key1Type="int";
        if(prop1!=null) {
            key1=prop1.Name;
            CodeTypeRef codeTypeRef = prop1.Type;
            key1Type=codeTypeRef.AsString;
            return(key1, key1Type);
        }
        return(null,null);
    }

    //Get Class by full name 
    public static CodeType FindClass(DTE dte, Project project, string name)
    {
        return project.CodeModel.CodeTypeFromFullName(name);
    }

    //
    public List<CodeClass> FindClasses(Project project, string ns, string className) 
    {
        List<CodeClass> result = new List<CodeClass>();
        FindClasses(project.CodeModel.CodeElements, className, ns, result, false);
        return result;
    }

    private void FindClasses(CodeElements elements, string className, string searchNamespace, List<CodeClass> result, bool isNamespaceOk) 
    {
        if (elements == null) return;
        foreach (CodeElement element in elements) 
        {
            if (element is CodeNamespace) 
            {
                CodeNamespace ns = element as CodeNamespace;
                if (ns != null) 
                {
                    if (ns.FullName == searchNamespace)
                        FindClasses(ns.Members, className, searchNamespace, result, true);
                    else
                        FindClasses(ns.Members, className, searchNamespace, result, false);
                }
            } 
            else if (element is CodeClass && isNamespaceOk) 
            {
                CodeClass c = element as CodeClass;
                if (c != null) 
                {
                    if (c.FullName.Contains(className))
                        result.Add(c);

                    FindClasses(c.Members, className, searchNamespace, result, true);
                }
            }
        }
    }
        
    //Naming
    public string GetProperClassName(string className)
    {
        string returnString = className;
        returnString = returnString.Replace("_", " ");
        TextInfo ti = CultureInfo.CurrentCulture.TextInfo;  
        //returnString = ti.ToTitleCase(returnString);
        returnString = returnString.Replace(" ", "");
        return returnString;
    }

    private static string CharToUpper(string input, int position)
    {
        return input.ToString().ToUpper() + input.Substring(position+1);
    }

    public string GetKeyAttributePropertyOfaClass(Project project, string ns, string className)
    {
        var classes = FindClasses(project, ns, className);
        return "";
    }
#>